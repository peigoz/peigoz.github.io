#将nginx进程设置为普通用户，为了安全考虑
#user nginx; 
#user  nobody;
#当前启动的worker进程，官方建议是与系统核心数一致
worker_processes  1;
#方式一，就是自动分配绑定
worker_cpu_affinity auto;

#针对 nginx 句柄的文件限制
worker_rlimit_nofile 35535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


#events {
      #使用epoll内核模型
    #user epoll;
    #worker_connections  1024;
#}


http {
    server_tokens off;  #隐藏nginx的版本号
    include       mime.types;
    default_type  application/octet-stream;

        charset utf-8;#设置字符集,服务端返回给客户端报文的时候，Nginx强行将报文转码为utf-8

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

     ########
    #Gzip module
    gzip  on;    #文件压缩默认可以打开.告诉nginx采用gzip压缩的形式发送数据。这将会减少发送的数据量。
    gzip_disable "MSIE [1-6]\."; #对于有些浏览器不能识别压缩，需要过滤如ie6
    gzip_http_version 1.1; #设置识别 http 协议版本，默认是 1.1
    gzip_buffers 32 4k;

    gzip_comp_level 6;

    gzip_min_length 200;

    gzip_types text/css text/xml application/javascript;

    gzip_vary on;

    #负载均衡
    #upstream backendserver {
    #    server 119.29.52.238:80 max_fails=2 fail_timeout=10s; 
    #    server 47.98.149.4:80 max_fails=2 fail_timeout=10s; 
    #}

    server {
        listen 80;
	      server_name  localhost;
        location  / {
            root   /home/dist/;
            index  index.html;
            try_files $uri $uri/ @router;
            autoindex on;
        }

	      location  /api/ {
            proxy_pass http://127.0.0.1:3000/test/;
        }

        #server_name peigo.top;
        #server_name  0.0.0.0;
        #rewrite ^ https://$http_host$request_uri? permanent;
    } 

    #server {
        #listen       443 ssl;
        #server_name  0.0.0.0;
        #server_name  peigo.top;

	      #ssl_certificate  /usr/local/nginx-1.18.0/ssl/1_peigo.top_bundle.crt
	      #ssl_certificate_key /usr/local/nginx-1.18.0/ssl/2_peigo.top.key;
	      #ssl_session_timeout  5m;
	      #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
 	      #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;
	      #ssl_prefer_server_ciphers  on;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location  / {
        #    root   /home/dist/;
        #    index  index.html;
        #    try_files $uri $uri/ @router;
        #    autoindex on;
        #}

        #location  /admin/ {
        #    proxy_pass http://127.0.0.1:8080/;
        #}

	      #location  /api/ {
        #    proxy_pass http://127.0.0.1:3000/test/;
        #}

        #location @router{
        #    rewrite ^.*$/index.html last;
        #}


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    #server {
        #listen       8080 ssl;
        #server_name   peigo.top;
	      #ssl_certificate  /usr/local/nginx-1.18.0/ssl/1_peigo.top_bundle.crt
	      #ssl_certificate_key /usr/local/nginx-1.18.0/ssl/2_peigo.top.key;
	      #ssl_session_timeout  5m;
	      #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
 	      #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;
	      #ssl_prefer_server_ciphers  on;


        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location  / {
        #    root   /manage/dist/;
        #    index  index.html;
        #    try_files $uri $uri/ @router;
        #    autoindex on;
        #}
	      #location  /api/ {
        #    proxy_pass http://127.0.0.1:3000/test/;
        #}

        #location @router{
        #    rewrite ^.*$ /index.html last;
        #}


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    #}

}
